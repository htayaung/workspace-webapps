@page "/category"
@attribute [Authorize]
@inherits AuthBaseComponent
@using PersonalExpenseTracker.Models.ViewModels

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <div class="d-flex bd-highlight">
                    <div class="p-2 flex-grow-1 bd-highlight"><h3>Manage Category</h3></div>
                    <div class="p-2 bd-highlight">
                        <button type="button" class="btn btn-primary" @onclick="()=>OnCreateClick()">Create category</button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="mt-3 inputs">
                    <i class="fa fa-search"></i>
                    <input type="text" @ref="ReferenceSearchInput" @oninput="OnSearch" class="form-control" placeholder="Search...">
                </div>

                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Name</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Categories.Count > 0)
                        {
                            foreach (var category in Categories.Select((value, i) => new { Index = i + 1, Value = value }))
                            {
                                <tr>
                                    <th scope="row">@category.Index</th>
                                    <td>@category.Value.Name</td>
                                    <td class="text-end">
                                        <button class="btn btn-sm btn-link" @onclick="()=>OnEditClick(category.Value)">
                                            <span class="oi oi-pencil" aria-hidden="true"></span>
                                        </button>
                                        <button class="btn btn-sm btn-link" @onclick="()=>OnDeleteClick(category.Value)">
                                            <span class="oi oi-trash" aria-hidden="true"></span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="3"><p class="text-center">No record found.</p></td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <SaveCategory OnSubmitCallback="Refresh"
                      Category="SelectedCategory"
                      SetFocus="SetFocusOnChildComponent" />
    </div>
</div>

@if (ShowDeleteDialog)
{
    <DialogBox Title="Are you sure?"
           Text=@string.Format("Do you want to delete this category ({0})?", SelectedCategory.Name)
           OnClose="@DeleteDialogCallback"
           DialogType="DialogBox.DialogBoxType.DeleteCancel" />
}


@code {
    private IList<CategoryViewModel> Categories = new List<CategoryViewModel>();

    ElementReference ReferenceSearchInput = new();
    private string? SearchText;

    private CategoryViewModel SelectedCategory = new();
    private bool SetFocusOnChildComponent = false;
    private bool ShowDeleteDialog;

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
        await ReferenceSearchInput.FocusAsync();
    }

    public async void Refresh()
    {
        await LoadData();
        await ReferenceSearchInput.FocusAsync();
    }

    private async Task LoadData()
    {
        var categoryModels = await UnitOfWork.Category.GetAsync(
            filter: model => model.CreatedBy == UserId && (SearchText == null || model.Name.Contains(SearchText)),
            orderBy: model => model.OrderBy(model => model.Name));
        Categories = new List<CategoryViewModel>();
        foreach (var category in categoryModels)
        {
            Categories.Add(CategoryViewModel.FromEntity(category));
        }

        SelectedCategory = new();
        SetFocusOnChildComponent = false;
        StateHasChanged();
    }

    private async Task OnSearch(ChangeEventArgs e)
    {
        SearchText = "";
        if (e.Value != null)
        {
            SearchText = e.Value.ToString();
            await LoadData();
        }
    }

    private void OnCreateClick()
    {
        SelectedCategory = new();
        SetFocusOnChildComponent = true;
    }

    private void OnEditClick(CategoryViewModel category)
    {
        SelectedCategory = category;
        SetFocusOnChildComponent = true;
    }

    private void OnDeleteClick(CategoryViewModel category)
    {
        ShowDeleteDialog = true;
        SelectedCategory = category;
    }

    private async Task DeleteDialogCallback(bool accepted)
    {
        if (accepted)
        {
            UnitOfWork.Category.Delete(SelectedCategory.Id, UserId);
            await UnitOfWork.SaveAsync();
            await LoadData();
        }

        ShowDeleteDialog = false;
        StateHasChanged();
    }
}
